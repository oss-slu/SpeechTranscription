name: Build, Test, and Release on macOS and Windows

on:
  push:
    branches:
      - issue178_build-test-failures

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ffmpeg portaudio libomp cmake pkg-config --quiet
          brew link --overwrite ffmpeg portaudio libomp cmake pkg-config || true

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ffmpeg --no-progress
          choco install -y portaudio --source=https://community.chocolatey.org/api/v2/ --no-progress
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Choco install had non-zero exit code but continuing..."
          }

      - name: Install critical Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel
          
          # Install PyTorch with specific version based on OS
          if [ "$RUNNER_OS" == "Windows" ]; then
            pip install torch==2.0.0+cpu torchaudio==2.0.1+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html
          else
            pip install torch==2.0.0 torchaudio==2.0.1
          fi
          
          # Install requirements with detailed error logging
          pip install -r requirements.txt -v

      - name: Install NLTK data
        run: |
          python -c "import nltk; nltk.download('all', quiet=True)"

      - name: Run tests
        run: |
          mkdir -p test-output
          python -m pytest tests/ -v --capture=tee-sys

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-output/
            .pytest_cache/
            pytest-logs.txt
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Use latest LTS version

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: test-results-*
          merge-multiple: true

      - name: Create project ZIP
        run: |
          zip -r Saltify.zip . -x "*.git*" "*.pytest_cache*" "__pycache__/*" "*.pyc" "artifacts/*"

      - name: Generate release notes
        run: |
          echo "## Automated Release" > release_notes.md
          echo "Build number: ${{ github.run_number }}" >> release_notes.md
          echo "Commit: ${{ github.sha }}" >> release_notes.md
          echo "## Test Results" >> release_notes.md
          echo "Test results summary:" >> release_notes.md
          find artifacts -type f -exec cat {} \; >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "- Saltify.zip: Complete project source code" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/**
            Saltify.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build, Test, and Release

on:
  push:
    branches:
      - issue178_build-test-failures  # Changed back to your test branch

jobs:
  macos-build:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Debug Environment
        run: |
          echo "Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "System info:"
          sw_vers
          echo "Brew info:"
          brew --version

      - name: Install system dependencies
        run: |
          brew update
          brew install ffmpeg portaudio pkg-config
          echo "Installed packages:"
          brew list
          echo "PortAudio location:"
          brew list portaudio

      - name: Set environment variables
        run: |
          echo "LDFLAGS=-L/usr/local/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "Environment variables set:"
          env | grep -E "LDFLAGS|CPPFLAGS|PKG_CONFIG_PATH"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install torch torchaudio --index-url https://download.pytorch.org/whl/cpu
          python -m pip install -v -r requirements.txt
          echo "Installed Python packages:"
          pip list

      - name: Install NLTK data
        run: |
          python -c "import nltk; nltk.download('all', quiet=True)"
          echo "NLTK data directory:"
          python -c "import nltk; print(nltk.data.path)"

      - name: Run tests
        run: |
          mkdir -p test_output
          python -m pytest tests/ -v --junitxml=test_output/test-results.xml > test_output/pytest-output.txt 2>&1 || true
          echo "Test output directory contents:"
          ls -la test_output/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-macos-${{ matrix.python-version }}
          path: test_output
          if-no-files-found: warn

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Debug Environment
        shell: pwsh
        run: |
          Write-Host "Python version:"
          python --version
          Write-Host "Pip version:"
          pip --version
          Write-Host "System info:"
          systeminfo | select-string "OS"

      - name: Install FFmpeg
        shell: pwsh
        run: |
          choco install ffmpeg -y
          Write-Host "FFmpeg version:"
          ffmpeg -version

      - name: Install PortAudio
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://files.portaudio.com/archives/pa_stable_v190700_20210406.tgz" -OutFile "portaudio.tgz"
          tar -xf portaudio.tgz
          cd portaudio
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build . --config Release
          cmake --install . --config Release
          Write-Host "PortAudio installation completed"
          dir "C:\Program Files\PortAudio"

      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install torch torchaudio --index-url https://download.pytorch.org/whl/cpu
          python -m pip install -v -r requirements.txt
          Write-Host "Installed Python packages:"
          pip list

      - name: Install NLTK data
        shell: pwsh
        run: |
          python -c "import nltk; nltk.download('all', quiet=True)"
          python -c "import nltk; print(nltk.data.path)"

      - name: Run tests
        shell: pwsh
        run: |
          mkdir test_output -ErrorAction SilentlyContinue
          python -m pytest tests/ -v --junitxml=test_output/test-results.xml > test_output/pytest-output.txt 2>&1
          Write-Host "Test output directory contents:"
          dir test_output

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-windows-${{ matrix.python-version }}
          path: test_output
          if-no-files-found: warn

  create-release:
    needs: [macos-build, windows-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: test-results-*
          merge-multiple: true

      - name: Debug artifacts
        run: |
          echo "Contents of artifacts directory:"
          ls -R artifacts/
          
      - name: Create project ZIP
        run: |
          zip -r Saltify.zip . -x "*.git*" "*.pytest_cache*" "__pycache__/*" "*.pyc" "artifacts/*"
          echo "Created ZIP file:"
          ls -lh Saltify.zip

      - name: Generate release notes
        run: |
          {
            echo "## Automated Release"
            echo "Build number: ${{ github.run_number }}"
            echo "Commit: ${{ github.sha }}"
            echo "## Test Results"
            echo "Test results from macOS and Windows builds are attached."
            echo "## Downloads"
            echo "- Saltify.zip: Complete project source code"
          } > release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
            Saltify.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
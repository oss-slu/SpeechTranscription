name: Build, Test, and Release on macOS and Windows

on:
  push:
    branches:
      - main  # Changed from issue178_build-test-failures to main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enable pip caching

      # macOS-specific system dependencies
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ffmpeg portaudio pkg-config
          export LDFLAGS="-L/usr/local/lib"
          export CPPFLAGS="-I/usr/local/include"
          export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"

      # Windows-specific system dependencies
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ffmpeg -y
          # Download and extract PortAudio manually for Windows
          curl -L https://files.portaudio.com/archives/pa_stable_v190700_20210406.tgz -o portaudio.tgz
          tar xf portaudio.tgz
          cd portaudio
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
          cmake --install . --config Release

      # Install Python dependencies with better error handling
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          # Install PyTorch and torchaudio first
          python -m pip install torch torchaudio --index-url https://download.pytorch.org/whl/cpu
          # Install other dependencies with verbose output
          python -m pip install -v -r requirements.txt
        env:
          # Set environment variables for building binary wheels
          SYSTEM_VERSION_COMPAT: 0  # For macOS
          CMAKE_GENERATOR: "Visual Studio 17 2022"  # For Windows

      - name: Install NLTK data
        run: |
          python -c "import nltk; nltk.download('all', quiet=True)"

      # Create test output directory
      - name: Create test output directory
        run: mkdir -p test_output

      # Run tests with proper output handling
      - name: Run tests with detailed output
        id: test
        run: |
          python -m pytest tests/ -v --junitxml=test_output/test-results.xml > test_output/pytest-output.txt 2>&1
        continue-on-error: true

      - name: Display test output
        if: always()
        shell: bash
        run: |
          if [ -f "test_output/pytest-output.txt" ]; then
            cat test_output/pytest-output.txt
          else
            echo "Test output file not found"
          fi

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test_output/test-results.xml
            test_output/pytest-output.txt
          if-no-files-found: warn

  release:
    if: success() # Only create release if builds succeed
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: test-results-*
          merge-multiple: true

      - name: Create project ZIP
        run: |
          zip -r Saltify.zip . -x "*.git*" "*.pytest_cache*" "__pycache__/*" "*.pyc" "artifacts/*"

      - name: Generate release notes
        run: |
          echo "## Automated Release" > release_notes.md
          echo "Build number: ${{ github.run_number }}" >> release_notes.md
          echo "Commit: ${{ github.sha }}" >> release_notes.md
          echo "## Test Results" >> release_notes.md
          echo "See attached test results in artifacts" >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "- Saltify.zip: Complete project source code" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/**
            Saltify.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build, Test, and Release on macOS and Windows

on:
  push:
    branches:
      - issue178_build-test-failures  # Change to 'main' when deploying

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ffmpeg portaudio libomp cmake --verbose  # Use verbose for detailed logs

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ffmpeg --verbose
          choco install portaudio --source=https://community.chocolatey.org/api/v2/ --verbose

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch==2.0.0 torchaudio==2.0.1 --verbose  # Verbose for detailed output
          pip install -r requirements.txt --verbose
        continue-on-error: false

      - name: Install NLTK data
        run: |
          python -c "import nltk; nltk.download('all')"

      - name: Run tests with detailed output
        id: test
        run: |
          mkdir -p test-output  # Ensure output folder exists
          python -m pytest tests/ -v --junitxml=test-results.xml --capture=tee-sys > test-output/pytest-output.txt 2>&1
        continue-on-error: true

      - name: Display test output
        if: always()
        run: cat test-output/pytest-output.txt
        shell: bash

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results.xml
            test-output/pytest-output.txt
          if-no-files-found: warn

  release:
    if: always()
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: test-results-*
          merge-multiple: true

      - name: Create project ZIP
        run: |
          zip -r Saltify.zip . -x "*.git*" "*.pytest_cache*" "__pycache__/*" "*.pyc" "artifacts/*"

      - name: Generate release notes
        run: |
          echo "## Automated Release" > release_notes.md
          echo "Build number: ${{ github.run_number }}" >> release_notes.md
          echo "Commit: ${{ github.sha }}" >> release_notes.md
          echo "## Test Results" >> release_notes.md
          echo "See attached test results in artifacts" >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "- Saltify.zip: Complete project source code" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/**
            Saltify.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
release:
  needs: [call-macos-build, call-windows-build]
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create artifacts directory
      run: mkdir -p artifacts/macos artifacts/windows

    - name: Download macOS build artifacts
      uses: actions/download-artifact@v4
      with:
        name: SpeechTranscription_macos
        path: artifacts/macos

    - name: Download Windows build artifacts
      uses: actions/download-artifact@v4
      with:
        name: SpeechTranscription_windows
        path: artifacts/windows

    - name: List directory structure
      run: |
        echo "Full directory structure:"
        find . -type f -not -path "./.git/*"
        
        echo "Contents of artifacts directory:"
        ls -la artifacts/
        ls -la artifacts/macos || echo "No macOS artifacts"
        ls -la artifacts/windows || echo "No Windows artifacts"

    - name: Create release notes
      run: |
        echo "Build number: ${{ github.run_number }}" >> release_notes.md
        echo "Commit: ${{ github.sha }}" >> release_notes.md
        echo "Branch: ${{ github.ref_name }}" >> release_notes.md
        echo "Event type: ${{ github.event_name }}" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        
        if [ -d "artifacts/macos" ] && [ "$(ls -A artifacts/macos)" ]; then
          echo "- macOS executable included" >> release_notes.md
        else
          echo "Note: macOS executable not available for this release" >> release_notes.md
        fi
        
        if [ -d "artifacts/windows" ] && [ "$(ls -A artifacts/windows)" ]; then
          echo "- Windows executable included" >> release_notes.md
        else
          echo "Note: Windows executable not available for this release" >> release_notes.md
        fi

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body_path: ./release_notes.md
        draft: false
        prerelease: false

    - name: Upload macOS Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/macos/
        asset_name: macOS_Executables
        asset_content_type: application/octet-stream

    - name: Upload Windows Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/windows/
        asset_name: Windows_Executables
        asset_content_type: application/octet-stream

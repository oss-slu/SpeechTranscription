on:
  push:
    branches:
      - main
      - fix-mac-exe
      - testingv4artifact
      - issue169_dependency
      - issue178_build-test-failures
      - 182_fixing_executable

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Set BASE_DIR
        run: echo "BASE_DIR=$(pwd)" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Homebrew
        run: |
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          brew update

      - name: Installing Homebrew services
        run: brew services list

      - name: Install MySQL and required packages
        run: |
          brew install mysql pkg-config portaudio ffmpeg
          brew services start mysql
          pip install pyaudio

      - name: Set MySQL environment variables
        run: |
          export MYSQLCLIENT_CFLAGS='pkg-config mysqlclient --cflags'
          export MYSQLCLIENT_LDFLAGS='pkg-config mysqlclient --libs'

      - name: Check MySQL Status
        run: |
          mysqladmin ping || (echo "MySQL failed to start!" && exit 1)

      - name: Install Java
        run: |
          if ! java -version; then
            brew install openjdk@11
          fi

      - name: Set Up Python Virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV

      - name: Use virtualenv for all Python commands
        run: echo "${{ github.workspace }}/venv/bin" >> $GITHUB_PATH

      - name: Install Dependencies in Virtual Environment
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          python -m pip install -r requirements.txt --no-cache-dir

      - name: Install NLTK and fix SSL issues
        run: |
          python -m pip install nltk certifi --no-cache-dir
          CERT_PATH=$(python -m certifi)
          export SSL_CERT_FILE=${CERT_PATH}
          export REQUESTS_CA_BUNDLE=${CERT_PATH}
          python -c "import nltk; nltk.download('punkt'); nltk.download('averaged_perceptron_tagger')"

      - name: Resolve binary paths
        run: |
          PORTAUDIO_PATH=$(brew --prefix portaudio)/lib/libportaudio.dylib
          FFMPEG_PATH=$(which ffmpeg || echo "/usr/local/bin/ffmpeg")
          FFPROBE_PATH=$(which ffprobe || echo "/usr/local/bin/ffprobe")
          echo "PORTAUDIO_PATH=$PORTAUDIO_PATH" >> $GITHUB_ENV
          echo "FFMPEG_PATH=$FFMPEG_PATH" >> $GITHUB_ENV
          echo "FFPROBE_PATH=$FFPROBE_PATH" >> $GITHUB_ENV

      - name: Show PyInstaller Build Log
        if: always()
        run: cat build.log || echo "No build.log found"

      - name: Find Built Executables
        run: find . -type f -perm +111

      - name: Upload Build Log
        uses: actions/upload-artifact@v4
        with:
          name: Saltify-Build-Log
          path: ${{ github.workspace }}/build.log
          if-no-files-found: ignore
          retention-days: 30

      - name: Run Saltify Build Script
        run: |
          git update-index --chmod=+x .github/workflows/build-saltify.sh
          chmod +x .github/workflows/build-saltify.sh
          ./.github/workflows/build-saltify.sh

      - name: Show build script contents
        run: cat .github/workflows/build-saltify.sh

      - name: Ensure Saltify.app exists
        run: |
          if [ ! -d "dist/Saltify.app" ]; then
            echo "❌ dist/Saltify.app NOT FOUND!"
            ls -la dist/
            exit 1
          else
            echo "✅ Found dist/Saltify.app"
            ls -la dist/Saltify.app
          fi

      - name: Zip Saltify.app for macOS
        run: |
          mkdir -p release
          ditto -c -k --sequesterRsrc --keepParent "dist/Saltify.app" "release/Saltify_macos.zip"

      - name: Confirm ZIP creation
        run: |
          if [ ! -f "release/Saltify_macos.zip" ]; then
            echo "❌ release/Saltify_macos.zip NOT FOUND!"
            ls -la release/
            exit 1
          else
            echo "✅ ZIP created:"
            ls -lh release/Saltify_macos.zip
          fi

      - name: Upload zipped Saltify.app
        uses: actions/upload-artifact@v4
        with:
          name: SpeechTranscription_macos
          path: ./release/Saltify_macos.zip
          retention-days: 30

      - name: Echo uploaded artifact path (optional log)
        run: |
          echo "If upload was successful, this file should now be available in artifact viewer:"
          ls -lh release/

      - name: Cleanup build folders
        run: rm -rf build *.spec dist/

      - name: Verify Release Output
        run: |
          echo "✅ Final release directory content:"
          ls -la release/
